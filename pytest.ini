[pytest]
markers =
    slow: marks tests as slow (training/optimization tests that take significant time)
    
# Test execution modes:
# To run all tests: pytest -m "" or ./runtests.sh --all
# To run only slow tests: pytest -m slow or ./runtests.sh --slow
# To run only fast tests: pytest -m "not slow" or ./runtests.sh --fast
# Note: Default pytest behavior now runs ALL tests. Use runtests.sh for filtering.
addopts = --tb=short

# Suppress known warnings from core Tianshou that are not related to MARL
filterwarnings =
    ignore:You are calling Batch.empty on a NumPy scalar:UserWarning
    ignore:Creating a tensor from a list of numpy.ndarrays is extremely slow:UserWarning
    ignore::DeprecationWarning:numba
    ignore::PendingDeprecationWarning:numba
    # Suppress pygame's pkg_resources deprecation warnings
    ignore:pkg_resources is deprecated as an API:DeprecationWarning:pygame
    ignore:Deprecated call to `pkg_resources.declare_namespace:DeprecationWarning:pkg_resources
    # Suppress expected Collector warnings from tests
    ignore:Single environment detected, wrap to DummyVectorEnv:UserWarning:tianshou.data.collector
    ignore:.*is not a multiple of.*self.env_num.*:UserWarning:tianshou.data.collector
    ignore:.*should be larger than self.env_num.*:UserWarning:tianshou.data.collector
    ignore:Using async setting may collect extra transitions into buffer:UserWarning:tianshou.data.collector

# Test discovery patterns
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Minimum Python version
minversion = 3.11

# Test paths
testpaths = test

# Show extra test summary info
# f = failed, E = error, s = skipped, x = xfailed, X = xpassed
# p = passed, P = passed with output, a = all except passed
console_output_style = progress